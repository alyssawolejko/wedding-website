{"version":3,"sources":["utils/Firebase/config.js","utils/Firebase/helpers.js","features/Venues/components/VenueCard.js","screens/Home/index.js","App.js","utils/Firebase/initialize.js","serviceWorker.js","index.js"],"names":["apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getImageFromStorage","path","a","firebase","storage","refFromURL","getDownloadURL","url","VenueCard","state","image","featuredImage","this","props","setState","name","src","alt","style","width","React","PureComponent","Home","venues","getVenues","database","ref","once","then","data","_","values","val","className","map","v","key","Component","App","initializeApp","firebaseConfig","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0TAEe,GACXA,OAAQC,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAON,6C,2DCPEO,EAAmB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDAC5BD,EAD4B,iEAEfE,IAASC,UAAUC,WAAWJ,GAAMK,iBAFrB,cAE3BC,EAF2B,yBAG1BA,GAH0B,2CAAH,sDCCXC,E,2MAEnBC,MAAQ,CACNC,MAAO,M,0MAIAC,EAAiBC,KAAKC,MAAtBF,e,gCAEeX,EAAoBW,G,OAAlCD,E,OACNE,KAAKE,SAAS,CACZJ,U,qIAMG,IACCK,EAASH,KAAKC,MAAdE,KACAL,EAAUE,KAAKH,MAAfC,MACR,OACE,6BACE,2BAAIK,GACHL,GACC,yBAAKM,IAAKN,EAAOO,IAAG,yBAAoBF,GAAQG,MAAO,CAAEC,MAAO,e,GAxBnCC,IAAMC,eCGxBC,E,2MACnBb,MAAQ,CACNc,OAAQ,I,EAQVC,UAAY,WACVrB,IAASsB,WAAWC,IAAI,WAAWC,KAAK,SAASC,MAAK,SAAAC,GACpD,EAAKf,SAAS,CACZS,OAAQO,IAAEC,OAAOF,EAAKG,a,mFAN1BpB,KAAKY,c,+BAYL,OACE,6BACE,2CACA,yBAAKS,UAAU,kBACZH,IAAEI,IAAItB,KAAKH,MAAMc,QAAQ,SAAAY,GAAC,OACzB,kBAAC,EAAD,iBAAeA,EAAf,CAAkBC,IAAG,gBAAWD,EAAEpB,kB,GAxBZK,IAAMiB,WCInBC,G,mMCNnBC,wBAAcC,K,+BDWZ,OACE,kBAAC,IAAD,KACG,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOvC,KAAK,KACV,kBAAC,EAAD,a,GATqBoC,cEEbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d1a7eda.chunk.js","sourcesContent":["  \n  // Your web app's Firebase configuration\nexport default {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: \"weddingwebsite-11308.firebaseapp.com\",\n    databaseURL: \"https://weddingwebsite-11308.firebaseio.com\",\n    projectId: \"weddingwebsite-11308\",\n    storageBucket: \"weddingwebsite-11308.appspot.com\",\n    messagingSenderId: \"345935650794\",\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};","import firebase from 'firebase';\n\nexport const getImageFromStorage = async (path) => {\n  if (!path) return \n  const url = await firebase.storage().refFromURL(path).getDownloadURL()\n  return url\n}","import React from 'react';\nimport {getImageFromStorage} from '../../../utils/Firebase/helpers'\n\nexport default class VenueCard extends React.PureComponent {\n\n  state = {\n    image: null\n  }\n\n  async componentDidMount() {\n    const {featuredImage} = this.props;\n    if (featuredImage) {\n      const image = await getImageFromStorage(featuredImage)\n      this.setState({\n        image\n      })\n    }\n  }\n  \n\n  render(){\n    const { name } = this.props;\n    const { image } = this.state;\n    return (\n      <div>\n        <p>{name}</p>\n        {image && (\n          <img src={image} alt={`venue location ${name}`} style={{ width: '100%' }}/>\n        )}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport firebase from 'firebase';\nimport _ from 'lodash';\n\nimport VenueCard from '../../features/Venues/components/VenueCard'\n\nexport default class Home extends React.Component {\n  state = {\n    venues: []\n  }\n\n\n  componentDidMount() {\n    this.getVenues();\n  }\n\n  getVenues = () => {\n    firebase.database().ref(\"venues/\").once(\"value\").then(data => {\n      this.setState({\n        venues: _.values(data.val())\n      })\n    });\n  }\n  \n  render(){\n    return (\n      <div>\n        <h1>Hello World</h1>\n        <div className=\"venueContainer\">\n          {_.map(this.state.venues, v => (\n            <VenueCard {...v} key={`venue-${v.name}`}/>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}","import React, {Component} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport initializeFirebase from './utils/Firebase/initialize';\nimport Home from './screens/Home'\nimport './App.css';\n\nexport default class App extends Component{\n  componentWillMount(){\n    initializeFirebase()\n  }\n  render(){\n    return (\n      <Router>\n         <Switch>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n","import { initializeApp } from 'firebase/app';\nimport firebaseConfig from './config'\n\nexport default () => {\n  initializeApp(firebaseConfig)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}